/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import * as Contracts from ".";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";
import { ethers } from "ethers";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "FurionSwapFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FurionSwapFactory__factory>;
    getContractFactory(
      name: "FurionSwapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FurionSwapPair__factory>;
    getContractFactory(
      name: "FurionSwapV2Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FurionSwapV2Router__factory>;
    getContractFactory(
      name: "IFurionSwapFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFurionSwapFactory__factory>;
    getContractFactory(
      name: "IFurionSwapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFurionSwapPair__factory>;
    getContractFactory(
      name: "IFurionSwapV2Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFurionSwapV2Router__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "Greeter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Greeter__factory>;
    getContractFactory(
      name: "SafePRBMathTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafePRBMathTester__factory>;
    getContractFactory(
      name: "StringsUtilsTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StringsUtilsTester__factory>;
    getContractFactory(
      name: "FurionToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FurionToken__factory>;
    getContractFactory(
      name: "IFurionToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFurionToken__factory>;
    getContractFactory(
      name: "ERC20PermitWithMultipleMinters",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PermitWithMultipleMinters__factory>;
    getContractFactory(
      name: "IERC20Decimals",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Decimals__factory>;
    getContractFactory(
      name: "IERC20PermitWithMultipleMinters",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitWithMultipleMinters__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "OwnableWithoutContext",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableWithoutContext__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;

    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "FurionSwapFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FurionSwapFactory>;
    getContractAt(
      name: "FurionSwapPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FurionSwapPair>;
    getContractAt(
      name: "FurionSwapV2Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FurionSwapV2Router>;
    getContractAt(
      name: "IFurionSwapFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFurionSwapFactory>;
    getContractAt(
      name: "IFurionSwapPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFurionSwapPair>;
    getContractAt(
      name: "IFurionSwapV2Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFurionSwapV2Router>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "Greeter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Greeter>;
    getContractAt(
      name: "SafePRBMathTester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafePRBMathTester>;
    getContractAt(
      name: "StringsUtilsTester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StringsUtilsTester>;
    getContractAt(
      name: "FurionToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FurionToken>;
    getContractAt(
      name: "IFurionToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFurionToken>;
    getContractAt(
      name: "ERC20PermitWithMultipleMinters",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PermitWithMultipleMinters>;
    getContractAt(
      name: "IERC20Decimals",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Decimals>;
    getContractAt(
      name: "IERC20PermitWithMultipleMinters",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitWithMultipleMinters>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "OwnableWithoutContext",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableWithoutContext>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
