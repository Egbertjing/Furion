/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import * as Contracts from ".";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";
import { ethers } from "ethers";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "FarmingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FarmingPool__factory>;
    getContractFactory(
      name: "FarmingPoolUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FarmingPoolUpgradeable__factory>;
    getContractFactory(
      name: "IFarmingPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFarmingPool__factory>;
    getContractFactory(
      name: "IVeERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVeERC20__factory>;
    getContractFactory(
      name: "IVeFUR",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVeFUR__factory>;
    getContractFactory(
      name: "VeERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VeERC20Upgradeable__factory>;
    getContractFactory(
      name: "VoteEscrowedFurion",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VoteEscrowedFurion__factory>;
    getContractFactory(
      name: "FurionSwapFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FurionSwapFactory__factory>;
    getContractFactory(
      name: "FurionSwapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FurionSwapPair__factory>;
    getContractFactory(
      name: "FurionSwapV2Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FurionSwapV2Router__factory>;
    getContractFactory(
      name: "IFurionSwapFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFurionSwapFactory__factory>;
    getContractFactory(
      name: "IFurionSwapPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFurionSwapPair__factory>;
    getContractFactory(
      name: "IFurionSwapV2Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFurionSwapV2Router__factory>;
    getContractFactory(
      name: "Greeter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Greeter__factory>;
    getContractFactory(
      name: "IncomeMaker",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IncomeMaker__factory>;
    getContractFactory(
      name: "IncomeSharingVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IncomeSharingVault__factory>;
    getContractFactory(
      name: "SafePRBMathTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SafePRBMathTester__factory>;
    getContractFactory(
      name: "StringsUtilsTester",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StringsUtilsTester__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockUSD",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUSD__factory>;
    getContractFactory(
      name: "FurionToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FurionToken__factory>;
    getContractFactory(
      name: "IFurionToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFurionToken__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "ERC20PermitWithMultipleMinters",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20PermitWithMultipleMinters__factory>;
    getContractFactory(
      name: "IERC20Decimals",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Decimals__factory>;
    getContractFactory(
      name: "IERC20PermitWithMultipleMinters",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitWithMultipleMinters__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "OwnableWithoutContext",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableWithoutContext__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "FarmingPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FarmingPool>;
    getContractAt(
      name: "FarmingPoolUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FarmingPoolUpgradeable>;
    getContractAt(
      name: "IFarmingPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFarmingPool>;
    getContractAt(
      name: "IVeERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVeERC20>;
    getContractAt(
      name: "IVeFUR",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVeFUR>;
    getContractAt(
      name: "VeERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VeERC20Upgradeable>;
    getContractAt(
      name: "VoteEscrowedFurion",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VoteEscrowedFurion>;
    getContractAt(
      name: "FurionSwapFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FurionSwapFactory>;
    getContractAt(
      name: "FurionSwapPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FurionSwapPair>;
    getContractAt(
      name: "FurionSwapV2Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FurionSwapV2Router>;
    getContractAt(
      name: "IFurionSwapFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFurionSwapFactory>;
    getContractAt(
      name: "IFurionSwapPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFurionSwapPair>;
    getContractAt(
      name: "IFurionSwapV2Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFurionSwapV2Router>;
    getContractAt(
      name: "Greeter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Greeter>;
    getContractAt(
      name: "IncomeMaker",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IncomeMaker>;
    getContractAt(
      name: "IncomeSharingVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IncomeSharingVault>;
    getContractAt(
      name: "SafePRBMathTester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SafePRBMathTester>;
    getContractAt(
      name: "StringsUtilsTester",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StringsUtilsTester>;
    getContractAt(
      name: "MockERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockUSD",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockUSD>;
    getContractAt(
      name: "FurionToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FurionToken>;
    getContractAt(
      name: "IFurionToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFurionToken>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "WETH9",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH9>;
    getContractAt(
      name: "ERC20PermitWithMultipleMinters",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20PermitWithMultipleMinters>;
    getContractAt(
      name: "IERC20Decimals",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Decimals>;
    getContractAt(
      name: "IERC20PermitWithMultipleMinters",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitWithMultipleMinters>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "OwnableWithoutContext",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableWithoutContext>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
