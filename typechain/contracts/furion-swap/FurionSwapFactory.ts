/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface FurionSwapFactoryInterface extends utils.Interface {
  functions: {
    "allPairs(uint256)": FunctionFragment;
    "allPairsLength()": FunctionFragment;
    "createPair(address,address)": FunctionFragment;
    "getPair(address,address)": FunctionFragment;
    "incomeMaker()": FunctionFragment;
    "incomeMakerProportion()": FunctionFragment;
    "isFurionPairs(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "setIncomeMakerAddress(address)": FunctionFragment;
    "setIncomeMakerProportion(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allPairs"
      | "allPairsLength"
      | "createPair"
      | "getPair"
      | "incomeMaker"
      | "incomeMakerProportion"
      | "isFurionPairs"
      | "owner"
      | "setIncomeMakerAddress"
      | "setIncomeMakerProportion"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allPairs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "incomeMaker",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incomeMakerProportion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isFurionPairs",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setIncomeMakerAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setIncomeMakerProportion",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPairsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incomeMaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "incomeMakerProportion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFurionPairs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setIncomeMakerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setIncomeMakerProportion",
    data: BytesLike
  ): Result;

  events: {
    "IncomeMakerAddressChanged(address,address)": EventFragment;
    "IncomeMakerProportionChanged(uint256,uint256)": EventFragment;
    "PairCreated(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "IncomeMakerAddressChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "IncomeMakerProportionChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PairCreated"): EventFragment;
}

export interface IncomeMakerAddressChangedEventObject {
  oldIncomeMaker: string;
  newIncomeMaker: string;
}
export type IncomeMakerAddressChangedEvent = TypedEvent<
  [string, string],
  IncomeMakerAddressChangedEventObject
>;

export type IncomeMakerAddressChangedEventFilter =
  TypedEventFilter<IncomeMakerAddressChangedEvent>;

export interface IncomeMakerProportionChangedEventObject {
  oldProportion: BigNumber;
  newProportion: BigNumber;
}
export type IncomeMakerProportionChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  IncomeMakerProportionChangedEventObject
>;

export type IncomeMakerProportionChangedEventFilter =
  TypedEventFilter<IncomeMakerProportionChangedEvent>;

export interface PairCreatedEventObject {
  token0: string;
  token1: string;
  pair: string;
  allPairsLength: BigNumber;
}
export type PairCreatedEvent = TypedEvent<
  [string, string, string, BigNumber],
  PairCreatedEventObject
>;

export type PairCreatedEventFilter = TypedEventFilter<PairCreatedEvent>;

export interface FurionSwapFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FurionSwapFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allPairs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allPairsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPair(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    incomeMaker(overrides?: CallOverrides): Promise<[string]>;

    incomeMakerProportion(overrides?: CallOverrides): Promise<[BigNumber]>;

    isFurionPairs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setIncomeMakerAddress(
      _incomeMaker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setIncomeMakerProportion(
      _proportion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allPairs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

  createPair(
    _tokenA: PromiseOrValue<string>,
    _tokenB: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPair(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  incomeMaker(overrides?: CallOverrides): Promise<string>;

  incomeMakerProportion(overrides?: CallOverrides): Promise<BigNumber>;

  isFurionPairs(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  setIncomeMakerAddress(
    _incomeMaker: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setIncomeMakerProportion(
    _proportion: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allPairs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    incomeMaker(overrides?: CallOverrides): Promise<string>;

    incomeMakerProportion(overrides?: CallOverrides): Promise<BigNumber>;

    isFurionPairs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    setIncomeMakerAddress(
      _incomeMaker: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setIncomeMakerProportion(
      _proportion: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "IncomeMakerAddressChanged(address,address)"(
      oldIncomeMaker?: null,
      newIncomeMaker?: null
    ): IncomeMakerAddressChangedEventFilter;
    IncomeMakerAddressChanged(
      oldIncomeMaker?: null,
      newIncomeMaker?: null
    ): IncomeMakerAddressChangedEventFilter;

    "IncomeMakerProportionChanged(uint256,uint256)"(
      oldProportion?: null,
      newProportion?: null
    ): IncomeMakerProportionChangedEventFilter;
    IncomeMakerProportionChanged(
      oldProportion?: null,
      newProportion?: null
    ): IncomeMakerProportionChangedEventFilter;

    "PairCreated(address,address,address,uint256)"(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      pair?: null,
      allPairsLength?: null
    ): PairCreatedEventFilter;
    PairCreated(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      pair?: null,
      allPairsLength?: null
    ): PairCreatedEventFilter;
  };

  estimateGas: {
    allPairs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    incomeMaker(overrides?: CallOverrides): Promise<BigNumber>;

    incomeMakerProportion(overrides?: CallOverrides): Promise<BigNumber>;

    isFurionPairs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setIncomeMakerAddress(
      _incomeMaker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setIncomeMakerProportion(
      _proportion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allPairs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPair(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    incomeMaker(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    incomeMakerProportion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFurionPairs(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setIncomeMakerAddress(
      _incomeMaker: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setIncomeMakerProportion(
      _proportion: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
