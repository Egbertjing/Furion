/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface IFurionSwapV2RouterInterface extends utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "swapETHForExactTokens(uint256,address[],address,uint256)": FunctionFragment;
    "swapExactETHForTokens(uint256,address[],address,uint256)": FunctionFragment;
    "swapExactTokensForETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapTokensForExactETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "WETH"
      | "addLiquidity"
      | "addLiquidityETH"
      | "factory"
      | "removeLiquidity"
      | "removeLiquidityETH"
      | "swapETHForExactTokens"
      | "swapExactETHForTokens"
      | "swapExactTokensForETH"
      | "swapExactTokensForTokens"
      | "swapTokensForExactETH"
      | "swapTokensForExactTokens"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETH",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETH",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForExactTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETH",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactETH",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IFurionSwapV2Router extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFurionSwapV2RouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _amountADesired: PromiseOrValue<BigNumberish>,
      _amountBDesired: PromiseOrValue<BigNumberish>,
      _amountAMin: PromiseOrValue<BigNumberish>,
      _amountBMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLiquidityETH(
      _token: PromiseOrValue<string>,
      _amountTokenDesired: PromiseOrValue<BigNumberish>,
      _amountTokenMin: PromiseOrValue<BigNumberish>,
      _amountETHMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    removeLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _amountAMin: PromiseOrValue<BigNumberish>,
      _amountBMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityETH(
      _token: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _amountTokenMin: PromiseOrValue<BigNumberish>,
      _amountETHMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapETHForExactTokens(
      _amountOut: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactETHForTokens(
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForETH(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForTokens(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactETH(
      _amountOut: PromiseOrValue<BigNumberish>,
      _amountInMax: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactTokens(
      _amountOut: PromiseOrValue<BigNumberish>,
      _amountInMax: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    _tokenA: PromiseOrValue<string>,
    _tokenB: PromiseOrValue<string>,
    _amountADesired: PromiseOrValue<BigNumberish>,
    _amountBDesired: PromiseOrValue<BigNumberish>,
    _amountAMin: PromiseOrValue<BigNumberish>,
    _amountBMin: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLiquidityETH(
    _token: PromiseOrValue<string>,
    _amountTokenDesired: PromiseOrValue<BigNumberish>,
    _amountTokenMin: PromiseOrValue<BigNumberish>,
    _amountETHMin: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  removeLiquidity(
    _tokenA: PromiseOrValue<string>,
    _tokenB: PromiseOrValue<string>,
    _liquidity: PromiseOrValue<BigNumberish>,
    _amountAMin: PromiseOrValue<BigNumberish>,
    _amountBMin: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityETH(
    _token: PromiseOrValue<string>,
    _liquidity: PromiseOrValue<BigNumberish>,
    _amountTokenMin: PromiseOrValue<BigNumberish>,
    _amountETHMin: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapETHForExactTokens(
    _amountOut: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactETHForTokens(
    _amountOutMin: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForETH(
    _amountIn: PromiseOrValue<BigNumberish>,
    _amountOutMin: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForTokens(
    _amountIn: PromiseOrValue<BigNumberish>,
    _amountOutMin: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactETH(
    _amountOut: PromiseOrValue<BigNumberish>,
    _amountInMax: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactTokens(
    _amountOut: PromiseOrValue<BigNumberish>,
    _amountInMax: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    addLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _amountADesired: PromiseOrValue<BigNumberish>,
      _amountBDesired: PromiseOrValue<BigNumberish>,
      _amountAMin: PromiseOrValue<BigNumberish>,
      _amountBMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _amountA: BigNumber;
        _amountB: BigNumber;
        _liquidity: BigNumber;
      }
    >;

    addLiquidityETH(
      _token: PromiseOrValue<string>,
      _amountTokenDesired: PromiseOrValue<BigNumberish>,
      _amountTokenMin: PromiseOrValue<BigNumberish>,
      _amountETHMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        _amountToken: BigNumber;
        _amountETH: BigNumber;
        _liquidity: BigNumber;
      }
    >;

    factory(overrides?: CallOverrides): Promise<string>;

    removeLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _amountAMin: PromiseOrValue<BigNumberish>,
      _amountBMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { _amountA: BigNumber; _amountB: BigNumber }
    >;

    removeLiquidityETH(
      _token: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _amountTokenMin: PromiseOrValue<BigNumberish>,
      _amountETHMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        _amountToken: BigNumber;
        _amountETH: BigNumber;
      }
    >;

    swapETHForExactTokens(
      _amountOut: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactETHForTokens(
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForETH(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForTokens(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTokensForExactETH(
      _amountOut: PromiseOrValue<BigNumberish>,
      _amountInMax: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTokensForExactTokens(
      _amountOut: PromiseOrValue<BigNumberish>,
      _amountInMax: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _amountADesired: PromiseOrValue<BigNumberish>,
      _amountBDesired: PromiseOrValue<BigNumberish>,
      _amountAMin: PromiseOrValue<BigNumberish>,
      _amountBMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLiquidityETH(
      _token: PromiseOrValue<string>,
      _amountTokenDesired: PromiseOrValue<BigNumberish>,
      _amountTokenMin: PromiseOrValue<BigNumberish>,
      _amountETHMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    removeLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _amountAMin: PromiseOrValue<BigNumberish>,
      _amountBMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLiquidityETH(
      _token: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _amountTokenMin: PromiseOrValue<BigNumberish>,
      _amountETHMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapETHForExactTokens(
      _amountOut: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactETHForTokens(
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactTokensForETH(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactTokensForTokens(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokensForExactETH(
      _amountOut: PromiseOrValue<BigNumberish>,
      _amountInMax: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokensForExactTokens(
      _amountOut: PromiseOrValue<BigNumberish>,
      _amountInMax: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _amountADesired: PromiseOrValue<BigNumberish>,
      _amountBDesired: PromiseOrValue<BigNumberish>,
      _amountAMin: PromiseOrValue<BigNumberish>,
      _amountBMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityETH(
      _token: PromiseOrValue<string>,
      _amountTokenDesired: PromiseOrValue<BigNumberish>,
      _amountTokenMin: PromiseOrValue<BigNumberish>,
      _amountETHMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _amountAMin: PromiseOrValue<BigNumberish>,
      _amountBMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityETH(
      _token: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _amountTokenMin: PromiseOrValue<BigNumberish>,
      _amountETHMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapETHForExactTokens(
      _amountOut: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactETHForTokens(
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForETH(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokens(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactETH(
      _amountOut: PromiseOrValue<BigNumberish>,
      _amountInMax: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokens(
      _amountOut: PromiseOrValue<BigNumberish>,
      _amountInMax: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
