/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface FurionSwapV2RouterInterface extends utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "getAmountIn(uint256,address,address)": FunctionFragment;
    "getAmountOut(uint256,address,address)": FunctionFragment;
    "getAmountsIn(uint256,address[])": FunctionFragment;
    "getAmountsOut(uint256,address[])": FunctionFragment;
    "getReserves(address,address)": FunctionFragment;
    "quote(uint256,uint256,uint256)": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "swapETHForExactTokens(uint256,address[],address,uint256)": FunctionFragment;
    "swapExactETHForTokens(uint256,address[],address,uint256)": FunctionFragment;
    "swapExactTokensForETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapTokensForExactETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "WETH"
      | "addLiquidity"
      | "addLiquidityETH"
      | "factory"
      | "getAmountIn"
      | "getAmountOut"
      | "getAmountsIn"
      | "getAmountsOut"
      | "getReserves"
      | "quote"
      | "removeLiquidity"
      | "removeLiquidityETH"
      | "swapETHForExactTokens"
      | "swapExactETHForTokens"
      | "swapExactTokensForETH"
      | "swapExactTokensForTokens"
      | "swapTokensForExactETH"
      | "swapTokensForExactTokens"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETH",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsIn",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETH",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForExactTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETH",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactETH",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;

  events: {
    "LiquidityAdded(address,uint256,uint256,uint256)": EventFragment;
    "LiquidityRemoved(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
}

export interface LiquidityAddedEventObject {
  pairAddress: string;
  amountA: BigNumber;
  amountB: BigNumber;
  liquidity: BigNumber;
}
export type LiquidityAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LiquidityAddedEventObject
>;

export type LiquidityAddedEventFilter = TypedEventFilter<LiquidityAddedEvent>;

export interface LiquidityRemovedEventObject {
  pairAddress: string;
  amountA: BigNumber;
  amountB: BigNumber;
  liquidity: BigNumber;
}
export type LiquidityRemovedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  LiquidityRemovedEventObject
>;

export type LiquidityRemovedEventFilter =
  TypedEventFilter<LiquidityRemovedEvent>;

export interface FurionSwapV2Router extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FurionSwapV2RouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _amountADesired: PromiseOrValue<BigNumberish>,
      _amountBDesired: PromiseOrValue<BigNumberish>,
      _amountAMin: PromiseOrValue<BigNumberish>,
      _amountBMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLiquidityETH(
      _token: PromiseOrValue<string>,
      _amountTokenDesired: PromiseOrValue<BigNumberish>,
      _amountTokenMin: PromiseOrValue<BigNumberish>,
      _amountETHMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getAmountIn(
      _amountOut: PromiseOrValue<BigNumberish>,
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountIn: BigNumber }>;

    getAmountOut(
      _amountIn: PromiseOrValue<BigNumberish>,
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    getAmountsIn(
      _amountOut: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    getAmountsOut(
      _amountIn: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { amounts: BigNumber[] }>;

    getReserves(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reserve0: BigNumber; reserve1: BigNumber }
    >;

    quote(
      _amountA: PromiseOrValue<BigNumberish>,
      _reserveA: PromiseOrValue<BigNumberish>,
      _reserveB: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountB: BigNumber }>;

    removeLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _amountAMin: PromiseOrValue<BigNumberish>,
      _amountBMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityETH(
      _token: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _amountTokenMin: PromiseOrValue<BigNumberish>,
      _amountETHMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapETHForExactTokens(
      _amountOut: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactETHForTokens(
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForETH(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForTokens(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactETH(
      _amountOut: PromiseOrValue<BigNumberish>,
      _amountInMax: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactTokens(
      _amountOut: PromiseOrValue<BigNumberish>,
      _amountInMax: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    _tokenA: PromiseOrValue<string>,
    _tokenB: PromiseOrValue<string>,
    _amountADesired: PromiseOrValue<BigNumberish>,
    _amountBDesired: PromiseOrValue<BigNumberish>,
    _amountAMin: PromiseOrValue<BigNumberish>,
    _amountBMin: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLiquidityETH(
    _token: PromiseOrValue<string>,
    _amountTokenDesired: PromiseOrValue<BigNumberish>,
    _amountTokenMin: PromiseOrValue<BigNumberish>,
    _amountETHMin: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getAmountIn(
    _amountOut: PromiseOrValue<BigNumberish>,
    _tokenIn: PromiseOrValue<string>,
    _tokenOut: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountOut(
    _amountIn: PromiseOrValue<BigNumberish>,
    _tokenIn: PromiseOrValue<string>,
    _tokenOut: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAmountsIn(
    _amountOut: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getAmountsOut(
    _amountIn: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getReserves(
    _tokenA: PromiseOrValue<string>,
    _tokenB: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { reserve0: BigNumber; reserve1: BigNumber }
  >;

  quote(
    _amountA: PromiseOrValue<BigNumberish>,
    _reserveA: PromiseOrValue<BigNumberish>,
    _reserveB: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeLiquidity(
    _tokenA: PromiseOrValue<string>,
    _tokenB: PromiseOrValue<string>,
    _liquidity: PromiseOrValue<BigNumberish>,
    _amountAMin: PromiseOrValue<BigNumberish>,
    _amountBMin: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityETH(
    _token: PromiseOrValue<string>,
    _liquidity: PromiseOrValue<BigNumberish>,
    _amountTokenMin: PromiseOrValue<BigNumberish>,
    _amountETHMin: PromiseOrValue<BigNumberish>,
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapETHForExactTokens(
    _amountOut: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactETHForTokens(
    _amountOutMin: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForETH(
    _amountIn: PromiseOrValue<BigNumberish>,
    _amountOutMin: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForTokens(
    _amountIn: PromiseOrValue<BigNumberish>,
    _amountOutMin: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactETH(
    _amountOut: PromiseOrValue<BigNumberish>,
    _amountInMax: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactTokens(
    _amountOut: PromiseOrValue<BigNumberish>,
    _amountInMax: PromiseOrValue<BigNumberish>,
    _path: PromiseOrValue<string>[],
    _to: PromiseOrValue<string>,
    _deadline: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    addLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _amountADesired: PromiseOrValue<BigNumberish>,
      _amountBDesired: PromiseOrValue<BigNumberish>,
      _amountAMin: PromiseOrValue<BigNumberish>,
      _amountBMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountA: BigNumber;
        amountB: BigNumber;
        liquidity: BigNumber;
      }
    >;

    addLiquidityETH(
      _token: PromiseOrValue<string>,
      _amountTokenDesired: PromiseOrValue<BigNumberish>,
      _amountTokenMin: PromiseOrValue<BigNumberish>,
      _amountETHMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountToken: BigNumber;
        amountETH: BigNumber;
        liquidity: BigNumber;
      }
    >;

    factory(overrides?: CallOverrides): Promise<string>;

    getAmountIn(
      _amountOut: PromiseOrValue<BigNumberish>,
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      _amountIn: PromiseOrValue<BigNumberish>,
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsIn(
      _amountOut: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getAmountsOut(
      _amountIn: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getReserves(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { reserve0: BigNumber; reserve1: BigNumber }
    >;

    quote(
      _amountA: PromiseOrValue<BigNumberish>,
      _reserveA: PromiseOrValue<BigNumberish>,
      _reserveB: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _amountAMin: PromiseOrValue<BigNumberish>,
      _amountBMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amount0: BigNumber; amount1: BigNumber }
    >;

    removeLiquidityETH(
      _token: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _amountTokenMin: PromiseOrValue<BigNumberish>,
      _amountETHMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { amountToken: BigNumber; amountETH: BigNumber }
    >;

    swapETHForExactTokens(
      _amountOut: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactETHForTokens(
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForETH(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapExactTokensForTokens(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTokensForExactETH(
      _amountOut: PromiseOrValue<BigNumberish>,
      _amountInMax: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    swapTokensForExactTokens(
      _amountOut: PromiseOrValue<BigNumberish>,
      _amountInMax: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {
    "LiquidityAdded(address,uint256,uint256,uint256)"(
      pairAddress?: PromiseOrValue<string> | null,
      amountA?: null,
      amountB?: null,
      liquidity?: null
    ): LiquidityAddedEventFilter;
    LiquidityAdded(
      pairAddress?: PromiseOrValue<string> | null,
      amountA?: null,
      amountB?: null,
      liquidity?: null
    ): LiquidityAddedEventFilter;

    "LiquidityRemoved(address,uint256,uint256,uint256)"(
      pairAddress?: PromiseOrValue<string> | null,
      amountA?: null,
      amountB?: null,
      liquidity?: null
    ): LiquidityRemovedEventFilter;
    LiquidityRemoved(
      pairAddress?: PromiseOrValue<string> | null,
      amountA?: null,
      amountB?: null,
      liquidity?: null
    ): LiquidityRemovedEventFilter;
  };

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>;

    addLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _amountADesired: PromiseOrValue<BigNumberish>,
      _amountBDesired: PromiseOrValue<BigNumberish>,
      _amountAMin: PromiseOrValue<BigNumberish>,
      _amountBMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addLiquidityETH(
      _token: PromiseOrValue<string>,
      _amountTokenDesired: PromiseOrValue<BigNumberish>,
      _amountTokenMin: PromiseOrValue<BigNumberish>,
      _amountETHMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getAmountIn(
      _amountOut: PromiseOrValue<BigNumberish>,
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountOut(
      _amountIn: PromiseOrValue<BigNumberish>,
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsIn(
      _amountOut: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAmountsOut(
      _amountIn: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quote(
      _amountA: PromiseOrValue<BigNumberish>,
      _reserveA: PromiseOrValue<BigNumberish>,
      _reserveB: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _amountAMin: PromiseOrValue<BigNumberish>,
      _amountBMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeLiquidityETH(
      _token: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _amountTokenMin: PromiseOrValue<BigNumberish>,
      _amountETHMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapETHForExactTokens(
      _amountOut: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactETHForTokens(
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactTokensForETH(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapExactTokensForTokens(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokensForExactETH(
      _amountOut: PromiseOrValue<BigNumberish>,
      _amountInMax: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    swapTokensForExactTokens(
      _amountOut: PromiseOrValue<BigNumberish>,
      _amountInMax: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _amountADesired: PromiseOrValue<BigNumberish>,
      _amountBDesired: PromiseOrValue<BigNumberish>,
      _amountAMin: PromiseOrValue<BigNumberish>,
      _amountBMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityETH(
      _token: PromiseOrValue<string>,
      _amountTokenDesired: PromiseOrValue<BigNumberish>,
      _amountTokenMin: PromiseOrValue<BigNumberish>,
      _amountETHMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountIn(
      _amountOut: PromiseOrValue<BigNumberish>,
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      _amountIn: PromiseOrValue<BigNumberish>,
      _tokenIn: PromiseOrValue<string>,
      _tokenOut: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsIn(
      _amountOut: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      _amountIn: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quote(
      _amountA: PromiseOrValue<BigNumberish>,
      _reserveA: PromiseOrValue<BigNumberish>,
      _reserveB: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      _tokenA: PromiseOrValue<string>,
      _tokenB: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _amountAMin: PromiseOrValue<BigNumberish>,
      _amountBMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityETH(
      _token: PromiseOrValue<string>,
      _liquidity: PromiseOrValue<BigNumberish>,
      _amountTokenMin: PromiseOrValue<BigNumberish>,
      _amountETHMin: PromiseOrValue<BigNumberish>,
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapETHForExactTokens(
      _amountOut: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactETHForTokens(
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForETH(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokens(
      _amountIn: PromiseOrValue<BigNumberish>,
      _amountOutMin: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactETH(
      _amountOut: PromiseOrValue<BigNumberish>,
      _amountInMax: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokens(
      _amountOut: PromiseOrValue<BigNumberish>,
      _amountInMax: PromiseOrValue<BigNumberish>,
      _path: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>,
      _deadline: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
